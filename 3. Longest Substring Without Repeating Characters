class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        # Dictionary to store the last position of each character
        char_index_map = {}
        max_length = 0
        start = 0  # Start of the sliding window
        
        # Iterate through the string
        for end in range(len(s)):
            current_char = s[end]
            
            # If the character is already in the map and within the current window
            if current_char in char_index_map and char_index_map[current_char] >= start:
                # Move the start of the window right after the last occurrence of the current character
                start = char_index_map[current_char] + 1
            
            # Update the last seen index of the current character
            char_index_map[current_char] = end
            
            # Calculate the length of the current window
            current_length = end - start + 1
            # Update the maximum length
            max_length = max(max_length, current_length)
        
        return max_length
