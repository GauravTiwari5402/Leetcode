# Definition for singly-linked list.
class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        # Initialize a dummy node to serve as the starting point for the result list
        dummy = ListNode()  
        current = dummy  # Pointer to track the current node in the result list
        carry = 0  # Initialize the carry to 0
        
        # Traverse both linked lists until both are exhausted and no carry remains
        while l1 or l2 or carry:
            # Get the values from the current nodes of l1 and l2, or 0 if the node is None
            val1 = l1.val if l1 else 0
            val2 = l2.val if l2 else 0
            
            # Calculate the sum of the two digits plus any carry from the previous addition
            total = val1 + val2 + carry
            
            # Calculate the new carry (for numbers greater than or equal to 10)
            carry = total // 10
            
            # Create a new node for the current digit of the result (total % 10)
            current.next = ListNode(total % 10)
            
            # Move the current pointer to the new node
            current = current.next
            
            # Move to the next node in both input lists if they exist
            if l1: l1 = l1.next
            if l2: l2 = l2.next
        
        # Return the next node of the dummy, which is the head of the actual result list
        return dummy.next
